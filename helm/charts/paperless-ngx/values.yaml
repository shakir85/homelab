---
# A minimalistic Helm chart for Paperless-Ngx with SQLite and Redis backend.
# This chart is designed for simplicity and ease of deployment.
#
# This chart deploys:
# - Paperless-Ngx web application
# - Redis statefulset for caching and queuing + headless service to serve it.
# - Shared PVC for Paperless data and Redis database
# - Ingress resource for external access
# - Optional initial admin user secret
# For more information, see: https://docs.paperless-ngx.com/
#
paperlessngx:
  image:
    repository: ghcr.io/paperless-ngx/paperless-ngx
    tag: 2.16.3
    pullPolicy: IfNotPresent

  # Paperless-Ngx env-vars. For available configuration options see: https://docs.paperless-ngx.com/configuration/
  # Below are some commonly used options.
  env:
    # Identify the URL at which Paperless is available. Include https:// or http://.
    - name: PAPERLESS_URL
      value: ""
    - name: PAPERLESS_TIME_ZONE
      value: ""
    - name: PAPERLESS_OCR_LANGUAGE
      value: ""
    - name: "PAPERLESS_OCR_LANGUAGES"
      value: ""

# Creates an initial admin user by exporting the PAPERLESS_ADMIN_USER
# and PAPERLESS_ADMIN_PASSWORD environment variables.
# This is recommended only for initial setup on Kubernetes.
#
# The credentials below are stored in plain text under stringData and should
# be overridden during deployment.
#
# Example override:
#   `--set adminSecret.password=$(openssl rand -base64 16)`
#
# Reference: https://docs.paperless-ngx.com/configuration/#paperless_admin_user
adminSecret:
  enabled: true
  create: true
  name: paperless-ngx-admin
  usernameKey: username
  passwordKey: password
  username: admin
  password: changeme

# Redis instance used by Paperless, deployed as a statefulset.
# If you wish to change the host name, make it descriptive. The `host` value is used
# with the headless service as well, which is used to connect to the redis stateful pod.
redis:
  # host: paperless-ngx-redis
  image:
    repository: docker.io/library/redis
    tag: "8"
    pullPolicy: IfNotPresent

# Shared, single PVC used by both Paperless and Redis.
# The deployment mounts subPaths from this volume for:
# - Paperless: data, media, export, and consume
# - Redis: database directory
# The storage backend would look like this:
# .
# `-- PVC_Backend
#       |-- consume/
#       |-- data/
#       |-- media/
#       |-- export/
#       `-- redisdata/
#
# The goal is to reduce the number of resources provisioned and simplify volume management.
persistence:
  shared:
    existingClaim: ""

ingress:
  enabled: true
  host: ""
  ingressClassName: ""
  annotations: {}
