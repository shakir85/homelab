---
app:
  name: "stateless-app"
  image:
    repository: ""
    tag: ""
    pullPolicy: IfNotPresent

  # The port the application listens on inside the container.
  containerPort: 80

  service:
    # The port exposed by the K8s Service.
    port: 80
    # The targetPort that maps to containerPort.
    targetPort: 80

  volumeMounts:
    # Mount path for the Deployment.
    ## -- `mountPath`: Pointing to the app container image volume (e.g., /app/data).
    ## -- `subPath`: Pointing to the volume on the backend PVC (e.g., /mnt/nfs/someapp/data). The directory will be created automatically on the storage backend.
    - mountPath: ""
      subPath: ""

  # List of additional environment variables the app needs.
  # Format:
  # - name: ENV_VAR_NAME
  #   value: somevalue
  env: []

  envFromSecrets:
    # Optional: Reference a secret to inject environment variables.
    # This assumes the secret is created separately.
    enabled: false
    secretRefNames: []

  replicaCount: 1

  # A naive probes to check if the container is ready. It will
  # run the target the `containerPort` defined above and run
  # against the root path ("/"). Returns 200 OK if the app is ready.
  readinessProbe:
    enabled: false

  # If the app requires a liveness probe, it can be defined here.
  livenessProbe:
    enabled: false

  # Security context for the app container.
  securityContext:
    enabled: false
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false # Set to true if the app does not need to write to the root filesystem.
    runAsNonRoot: true
    runAsUser: 1000
    seccompProfile:
      type: RuntimeDefault


ingress:
  # Whether to enable Ingress for the app.
  enabled: true

  # Hostname for external access
  host: ""

  # IngressClass to use (e.g., "nginx", "traefik", etc.)
  ingressClassName: "nginx"

  # The port to expose via ingress (typically 80 or 443).
  port: ""

  # Extra annotations for the ingress resource.
  # Example for cert-manager:
  # annotations:
  #   cert-manager.io/cluster-issuer: "letsencrypt-prod"
  annotations: {}

# Some containers require healthchecks
livenessProbe:
  enabled: false
  command: ["", ""]
  initialDelaySeconds: 20
  periodSeconds: 60
  timeoutSeconds: 10
  failureThreshold: 3

# If you have an existing PersistentVolumeClaim.
# Otherwise, use `nfspersistent` to create a new PVC.
# Each container will mount their subPaths within this PVC as defined in `app.volumeMounts`.
existingClaim: ""

# Uses the `nfspersistence` sub-chart to create a new NFS-backed PVC.
# For dynamic provisioning, specify the `storageClassName` to use,  and remove the `nfs` block.
# For static provisionging, set the appropriate info in the `nfs` block, and ignore the `storageClassName`.
nfspersistence:
  enabled: false

  persistence:
    name: ""
    size: ""
    accessMode: ""
    reclaimPolicy: ""
    storageClassName: ""
    nfs:
      server: ""
      path: ""

# Affinity rules for pod scheduling.
affinity: {}
